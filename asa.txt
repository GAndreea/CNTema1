import functools

def compare(t1,t2):
    return (int(t1[1])>int(t2[1])) - (int(t1[1])<int(t2[1]))


def sparse_matrix(fisier):
    f = open(fisier, "r")
    n = int(f.readline());
    matrix = [[]] * n;
    lines = f.readlines()[n + 2:];
    for line in lines:
        vals = line.split(',');
        # vals[0]-valoarea vals[1]-linia vals[2]-coloana
        m = matrix[int(vals[1])];
        ok = 0;
        for t in range(len(m)):
            if m[t][1] == vals[2]:
                x = float(m[t][0]) + float(vals[0])
                new_t = (float(x), int(m[t][1]))
                m[t] = new_t;
                ok = 1;
        if (ok == 0):
            t = (float(vals[0]), vals[2]);
            matrix[int(vals[1])].append(t);
        mn=sorted(matrix[int(vals[1])], key=functools.cmp_to_key(compare));
        matrix[int(vals[1])]=list(mn);
    return matrix



def suma(m1, m2):
    matrix = [[]] * len(m1);
    print(len(m1),len(m2))
    for i in range(len(m2)):
        k=0
        l=0
        while (k<len(m1[i]) and l<len(m2[i])):
            if (m1[i][k][1] == m2[i][l][1]):
                x = float(m1[i][k][0]) + float(m2[i][l][0]);
                t=(x,m1[i][k][1]);
                matrix[i].append(t);
                k+=1;
                l+=1;
            else:
                if (int(m1[i][k][1]) < int(m2[i][l][1])):
                    matrix[i].append(m1[i][k]);
                    k+=1;
                else:
                    matrix[i].append(m2[i][l]);
                    l += 1;
        while (k<len(m1[i])):
            matrix[i].append(m1[i][k]);
            k += 1;
        while (l<len(m2[i])):
            matrix[i].append(m2[i][l]);
            l += 1;
    return matrix;

m1=sparse_matrix("a.txt");
m2=sparse_matrix("b.txt");
print(m1[0])
print(m2[0])
#print(suma(m1,m2)[0])





